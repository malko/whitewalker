#!/usr/bin/env node
/*jshint node:true, strict:false, laxcomma:true, laxbreak:true */
var connect = require('connect')
	, http = require('http')
	, fs = require('fs')
	, path = require('path')
	, childProcess = require('child_process')
	, app = connect()
	, stpl = require('../public/stpl.min.js').stpl
	, D = require('d.js')
	, dirPromise = D.nodeCapsule(fs, fs.readdir)
	, readPromise = D.nodeCapsule(fs, fs.readFile)
	, writePromise = D.nodeCapsule(fs, fs.writeFile)
	, execPromise = D.nodeCapsule(childProcess, childProcess.exec)
	, extExp = /\.([^.]+)$/
	, cleanExp = /[^a-z_0-9-]/ig
	, runningTests = {}
	, runningTestsPromise = {}
;
process.chdir(__dirname + '/../');

// utils
function removeExt(fname){
	return fname.replace(extExp,'');
}
function cleanName(name){
	return name.replace(cleanExp,'');
}
function prepareTmpTest(testName){
	var testFilename = path.normalize(process.cwd() + '/tests/' + testName + '.js')
		, required = []
		, test
	;
	test = require(testFilename);
	// prepare replace strings
	Object.keys(test).forEach(function(key){
		if( typeof test[key] === 'string' ){
			required.push([key, test[key]]);
		}
	});
	return readPromise(testFilename, 'utf8')
		.success(function(test){ // replace named steps with requires
			required.forEach(function(patterns){
				test = test.replace(new RegExp('(["\'])?' + patterns[0] + '\\1\\s*:\\s*(["\'])' + patterns[1] + '\\2', 'g'), function(){
					return '"' + patterns[0] + '": require("../steps/' + patterns[1] + '.js")';
				});
			});
			return writePromise('./tmp/' + testName + '.js', test, 'utf8');
		})
	;
}

// load templates in sync mode before going further
fs.readdirSync('templates').forEach(function(tpl){
	stpl.registerString(removeExt(tpl), fs.readFileSync('templates/' + tpl).toString());
});

// extend connect
app.on = function (path, middleware){
	app.use(function(req, res, next){
		var params = req.originalUrl.match('^' + path + '$');
		if(! params){
			return next();
		}
		params = [].slice.call(arguments).concat(params.slice(1));
		middleware.apply(null, params);
	});
	return app;
};

// get the list of all tests files, prepare it as a template and return a promise
function renderTestList(){
	return dirPromise('tests')
		.success(function(tests){
			var data = {
				tests: tests.sort().map(function(item){
					var itemName = removeExt(item);
					if( runningTests[itemName] ){
						return runningTests[itemName];
					}
					return {
						name: itemName
						, file: item
						, startTime: ''
						, endTime: ''
						, duration: 0
						, out:'never run'
						, status:'unknown'
					};
				})
			};
			return stpl('tests',data);
		})
	;
}

// return the index file with list of available tests
app
	.on('/', function(req, res, next){
		renderTestList()
			.success(function(body){
				res.end(stpl('index', {body:body}));
			})
			.ensure(next)
		;
	})
	.on('^/run/([a-zA-Z0-9_-]+)$', function(req, res, next, testName){
		testName = cleanName(testName);
		var testSucceed = function(result){
				var test = runningTests[testName];
				test.endTime = new Date();
				test.duration = test.endTime.getTime() - test.startTime.getTime();
				test.status = 'ok';
				test.out = result.join('\n').replace(/\[[0-9;]+m/g,'');
				res.end(JSON.stringify(test));
			}
			, testFailed = function(err){
				var test = runningTests[testName];
				test.endTime = new Date();
				test.duration = test.endTime.getTime() - test.startTime.getTime();
				test.status = 'failed';
				test.out = err;
				res.end(JSON.stringify(test));
			}
			, end = function(){
				delete runningTestsPromise[testName];
				next();
			}
		;
		if( testName in runningTests){
			return runningTests[testName]
				.success(testSucceed)
				.error(testFailed)
				.ensure(end)
			;
		}
		runningTests[testName] = {
			name: testName
			, file: testName + '.js'
			, startTime: new Date()
			, endTime: ''
			, duration: 0
			, out:''
			, status:'running'
		};
		runningTestsPromise[testName] = prepareTmpTest(testName)
			.success(function(){
				return execPromise('node_modules/.bin/nightwatch -e chrome -c nightwatch.json -t /tmp/' + testName + '.js');
			})
			.success(testSucceed)
			.error(testFailed)
			.ensure(end)
			.rethrow()
		;
	})
	.use(connect.static('./public/'))
	.use(connect.static('./templates/'))
	.use(connect.static('./node_modules/d.js/lib/'))
;

http.createServer(app).listen(3000);
